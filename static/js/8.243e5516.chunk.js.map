{"version":3,"sources":["../node_modules/reactstrap/es/Input.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["propTypes","children","PropTypes","node","type","string","size","oneOfType","number","bsSize","valid","bool","invalid","tag","tagPropType","innerRef","object","func","plaintext","addon","className","cssModule","Input","_React$Component","props","_this","call","this","getRef","bind","_assertThisInitialized","focus","_inheritsLoose","_proto","prototype","ref","render","_this$props","attributes","_objectWithoutPropertiesLoose","checkInput","indexOf","isNotaNumber","RegExp","Tag","formControlClass","test","warnOnce","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","filter","Boolean","input","compact","replace","split","set","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","defaultResult","validResult","values","map","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/8.243e5516.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"]);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}