{"version":3,"sources":["assets/images/backgrounds/Marketing.png","views/pages/authentication/Login.js","middleware/API.js","../node_modules/reactstrap/es/CardTitle.js","../node_modules/reactstrap/es/Spinner.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","name","role","className","size","color","icon","Login","dispatch","useDispatch","history","useHistory","useState","Email","setEmail","Password","setPassword","loading","setLoading","showError","setShowError","ability","useContext","AbilityContext","useForm","register","errors","Submit","a","Action","post","email","password","res","data","success","userdata","action","subject","usertype","console","log","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","transition","Slide","hideProgressBar","autoClose","message","Row","Col","lg","sm","src","Logo","alt","width","height","md","CardTitle","tag","Form","FormGroup","Label","for","Input","autoFocus","type","value","id","placeholder","onChange","e","target","classnames","innerRef","required","validate","CustomInput","label","to","Button","Ripple","block","onClick","preventDefault","Spinner","axios","create","baseURL","propTypes","tagPropType","PropTypes","string","cssModule","object","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","children","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","renderIcon"],"mappings":"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","file":"static/js/12.32720fef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Marketing.e4142131.png\";","import { useState, useContext, Fragment } from 'react'\r\nimport classnames from 'classnames'\r\nimport Avatar from '@components/avatar'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { handleLogin } from '@store/actions/auth'\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\r\nimport Logo from '../../../../src/assets/images/logo/logo2.png'\r\nimport LoginBg from '@src/assets/images/backgrounds/Marketing.png'\r\nimport {\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n  Spinner\r\n} from 'reactstrap'\r\nimport '@styles/base/pages/page-auth.scss'\r\nimport Action from '../../../middleware/API'\r\nconst ToastContent = ({ name, role }) => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={ <Coffee size={ 12 } /> } />\r\n        <h6 className='toast-title font-weight-bold'>Welcome, { name }</h6>\r\n      </div>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span>You have successfully logged in as { role } user to CareInc. Enjoy!</span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [Email, setEmail] = useState('')\r\n  const [Password, setPassword] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [showError, setShowError] = useState('')\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { register, errors } = useForm()\r\n\r\n  const Submit = async () => {\r\n    setLoading(true)\r\n    const res = await Action.post(`auth/login`, {\r\n      email: Email,\r\n      password: Password\r\n    })\r\n    if (res.data.success) {\r\n      const userdata = res.data.data\r\n      res.data.ability = [{ action: \"manage\", subject: \"all\" }]\r\n      if (userdata.usertype === 1) {\r\n        userdata.usertype = 'admin'\r\n      } else if (userdata.usertype === 2) {\r\n        userdata.usertype = \"employee\"\r\n      } else {\r\n        userdata.usertype = \"customer\"\r\n      }\r\n      console.log(userdata)\r\n\r\n      dispatch(handleLogin(res.data))\r\n      ability.update([{ action: \"manage\", subject: \"all\" }])\r\n      history.push(getHomeRouteForLoggedInUser(1))\r\n      toast.success(\r\n        <ToastContent name={ userdata.name } role={ userdata.usertype } />,\r\n        { transition: Slide, hideProgressBar: true, autoClose: 2500 }\r\n      )\r\n\r\n    } else {\r\n      setLoading(false)\r\n      setShowError(res.data.message)\r\n    }\r\n\r\n  }\r\n  return (\r\n    <div className='auth-wrapper auth-v2'>\r\n      <Row className='auth-inner m-0'>\r\n        {/* <Link className='brand-logo lg:hidden' to='/' onClick={e => e.preventDefault()}>\r\n      <img src={Logo} width=\"100\" height=\"120\" alt=\"\"/>\r\n    </Link> */}\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={ Logo } alt='Login' width=\"400\" height=\"400\" />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\r\n              Welcome to Admin!\r\n            </CardTitle>\r\n            <Form className='auth-login-form mt-2'>\r\n              <FormGroup>\r\n                <Label className='form-label' for='login-email'>\r\n                  Email\r\n                </Label>\r\n                <Input\r\n                  autoFocus\r\n                  type='email'\r\n                  value={ Email }\r\n                  id='login-email'\r\n                  name='login-email'\r\n                  placeholder='john@example.com'\r\n                  onChange={ e => setEmail(e.target.value) }\r\n                  className={ classnames({ 'is-invalid': errors['login-email'] }) }\r\n                  innerRef={ register({ required: true, validate: value => value !== '' }) }\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                </div>\r\n                <InputPasswordToggle\r\n                  value={ Password }\r\n                  id='login-password'\r\n                  name='login-password'\r\n                  className='input-group-merge'\r\n                  onChange={ e => setPassword(e.target.value) }\r\n                  // className={classnames({ 'is-invalid': errors['login-password'] })}\r\n                  innerRef={ register({ required: true, validate: value => value !== '' }) }\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"d-flex\">\r\n                <CustomInput type='checkbox' className='custom-control-Primary mr-80' id='remember-me' label='Remember Me' />\r\n                <div className=\"ml-auto\">\r\n                  <Link to='/forgot-password'>\r\n                    <small className=\"text-right\">Forgot Password?</small>\r\n                  </Link>\r\n                </div>\r\n              </FormGroup>\r\n\r\n              <Button.Ripple type='submit' color='primary' block onClick={ (e) => {\r\n                e.preventDefault()\r\n                Submit()\r\n              } }>\r\n                Sign in\r\n                { loading ? <Spinner color='light' size=\"sm\" className=\"mx-1\" /> : null }\r\n              </Button.Ripple>\r\n              <span className='text-danger mt-2'>{ showError }</span>\r\n\r\n            </Form>\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Login\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    //  baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  type: PropTypes.string,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.string\n};\nvar defaultProps = {\n  tag: 'div',\n  type: 'border',\n  children: 'Loading...'\n};\n\nvar Spinner = function Spinner(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      type = props.type,\n      size = props.size,\n      color = props.color,\n      children = props.children,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"type\", \"size\", \"color\", \"children\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, size ? \"spinner-\" + type + \"-\" + size : false, \"spinner-\" + type, color ? \"text-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    role: \"status\"\n  }, attributes, {\n    className: classes\n  }), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: mapToCssModules('sr-only', cssModule)\n  }, children));\n};\n\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\nexport default Spinner;","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}