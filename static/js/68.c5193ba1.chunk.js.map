{"version":3,"sources":["views/category/Form.js","middleware/API.js","views/components/toastify/index.js"],"names":["CategoryForm","useState","img","setImg","preview","setPreview","success","setSuccess","heading","text","category","setCategory","history","useHistory","uppy","Uppy","meta","type","restrictions","maxNumberOfFiles","autoProceed","use","thumbnailGenerator","on","file","data","onChangeEvent","e","target","name","value","FormData","append","postCategory","a","preventDefault","Action","post","push","console","log","error","toast","title","tag","sm","for","className","FormGroup","addonType","size","id","onChange","placeholder","md","src","alt","Ripple","color","onClick","axios","create","baseURL","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/68.c5193ba1.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport Uppy from '@uppy/core'\r\nimport thumbnailGenerator from '@uppy/thumbnail-generator'\r\nimport { DragDrop } from '@uppy/react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardBody,\r\n    FormGroup,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    Form,\r\n    Button,\r\n    Label,\r\n    InputGroup,\r\n    InputGroupText,\r\n    InputGroupAddon,\r\n    CustomInput,\r\n    Spinner\r\n} from 'reactstrap'\r\nimport { FaPencilAlt, FaTextHeight } from 'react-icons/fa'\r\nimport Action from '../../middleware/API'\r\nconst CategoryForm = () => {\r\n    //  file Uploader\r\n    const [img, setImg] = useState(null)\r\n    //image preview\r\n    const [preview, setPreview] = useState('')\r\n    //for spin\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    // data to post \r\n    const [category, setCategory] = useState({\r\n        heading: '',\r\n        text: ''\r\n\r\n    })\r\n    //for updating the route\r\n    const history = useHistory()\r\n\r\n    const uppy = new Uppy({\r\n        meta: { type: 'avatar' },\r\n        restrictions: { maxNumberOfFiles: 1 },\r\n        autoProceed: true\r\n    })\r\n\r\n    uppy.use(thumbnailGenerator)\r\n\r\n    uppy.on('thumbnail:generated', (file, preview) => {\r\n        setImg(file.data)\r\n        setPreview(preview)\r\n    })\r\n\r\n    const onChangeEvent = (e) => {\r\n        const { name, value } = e.target\r\n        setCategory(e => {\r\n            return {\r\n                ...e,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n    //combinin all data\r\n    const data = new FormData()\r\n    data.append('heading', category.heading)\r\n    data.append('text', category.text)\r\n    data.append('file', img)\r\n    //post api\r\n    const postCategory = async (e) => {\r\n        setSuccess(true)\r\n\r\n        e.preventDefault()\r\n        const res = await Action.post(\"/category\", data)\r\n\r\n        if (res.data.success) {\r\n            history.push('/category/list')\r\n\r\n        } else {\r\n            console.log(error)\r\n            setSuccess(false)\r\n            toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <CardTitle tag='h4'>Add New Category</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Form>\r\n                    <Row>\r\n                        <Col sm='12'>\r\n                            {/* category form */ }\r\n                            <Label for='name'>Category Name</Label>\r\n                            <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                <InputGroupAddon addonType='prepend'>\r\n                                    <InputGroupText>\r\n                                        <FaPencilAlt size={ 15 } />\r\n                                    </InputGroupText>\r\n                                </InputGroupAddon>\r\n                                <Input type='text' name='heading' value={ category.heading } id='name'\r\n                                    onChange={ onChangeEvent }\r\n                                    placeholder='Enter Category Name' />\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col sm='12' md=\"6\">\r\n                            {/* category form */ }\r\n                            <Label for='descrip'>Category Description</Label>\r\n                            <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                <InputGroupAddon addonType='prepend'>\r\n                                    <InputGroupText>\r\n                                        <FaTextHeight size={ 15 } />\r\n                                    </InputGroupText>\r\n                                </InputGroupAddon>\r\n                                <Input type='text' name='text' id='descrip' value={ category.text } placeholder='Enter Your Category description'\r\n                                    onChange={ onChangeEvent } />\r\n                            </InputGroup>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm='12' className=\"mt-2\">\r\n                            {/* basic image upload */ }\r\n\r\n                            <h6> Category Image </h6>\r\n                            <DragDrop uppy={ uppy } onChange={ (e) => console.log('kjdheuidh') } />\r\n                            { img !== null ? <img className='rounded mt-2' src={ preview } alt='avatar' /> : null }\r\n                        </Col>\r\n\r\n                        <Col sm='12' className=\"mt-4\">\r\n                            <FormGroup className='d-flex mb-0'>\r\n                                <Button.Ripple className='mr-1' color='primary' type='submit' onClick={ (e) => postCategory(e) }>\r\n                                    Submit\r\n\r\n                                </Button.Ripple>\r\n                                {/* spinner */ }\r\n                                { success ? <Spinner color='primary' /> : null }\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\nexport default CategoryForm\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    // baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}