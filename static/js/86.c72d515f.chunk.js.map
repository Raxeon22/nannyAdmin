{"version":3,"sources":["views/page/Edit.js","middleware/API.js","views/components/toastify/index.js"],"names":["EditPage","url","useParams","useState","pageData","setPageData","loading","setLoading","EditorState","createEmpty","value","setValue","history","useHistory","useEffect","getData","a","Action","get","data","createWithContent","stateFromHTML","text","console","log","TextToHtml","stateToHTML","getCurrentContent","updateContent","id","put","success","toast","title","push","error","tag","sm","for","className","FormGroup","readOnly","type","placeholder","editorState","onEditorStateChange","Ripple","onClick","e","_id","preventDefault","color","axios","create","baseURL","SuccessToast","props","size","icon","role","ErrorToast"],"mappings":"uZA6GeA,UAhFE,WACf,IAAQC,EAAQC,cAARD,IACR,EAAgCE,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAASK,cAAYC,eAA/C,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAUC,cAEhBC,qBAAU,WACR,IAAMC,EAAO,uCAAG,8BAAAC,EAAA,+EAEWC,IAAOC,IAAP,WAAgBjB,IAF3B,gBAEJkB,EAFI,EAEJA,KACRR,EAASH,cAAYY,kBAAkBC,YAAcF,EAAKA,KAAKG,QAC/DjB,EAAYc,EAAKA,MAJL,gDAMZI,QAAQC,IAAR,MANY,yDAAH,qDAUbT,MACC,IAGH,IAAMU,EAAaC,YAAYhB,EAAMiB,qBAG/BC,EAAa,uCAAG,WAAOC,GAAP,SAAAb,EAAA,6DACpBT,GAAW,GADS,SAEFU,IAAOa,IAAP,WAAgB7B,EAAhB,YAAyB4B,GAAO,CAChDP,KAAMG,IAHY,cAKZN,KAAKY,SACXC,IAAMD,QAAQ,cAAC,IAAD,CAAcE,MAAM,UAAUX,KAAK,mCACjDf,GAAW,GACXK,EAAQsB,KAAK,mBAEb3B,GAAW,GACXyB,IAAMG,MAAM,cAAC,IAAD,CAAYF,MAAM,QAAQX,KAAK,4CAXzB,2CAAH,sDAenB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWc,IAAI,KAAf,yBAEF,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAKC,GAAG,KAAR,UAEE,cAAC,IAAD,CAAOC,IAAI,oBAAX,wBACA,cAAC,IAAD,CAAYC,UAAU,oBAAoBH,IAAMI,IAAhD,SACE,cAAC,IAAD,CAAOC,UAAQ,EAACC,KAAK,OAAOb,GAAG,oBAAoBnB,MAAQN,EAAS6B,MAAQU,YAAY,+BAI5F,eAAC,IAAD,CAAKN,GAAG,KAAKE,UAAU,OAAvB,UAEE,mDACA,cAAC,SAAD,CAAQK,YAAclC,EAAQmC,oBAAsB,SAAA1B,GAAI,OAAIR,EAASQ,SAGvE,cAAC,IAAD,CAAKkB,GAAG,KAAKE,UAAU,OAAvB,SACE,eAAC,IAAD,CAAWA,UAAU,cAArB,UACE,cAAC,IAAOO,OAAR,CAAeC,QAAU,SAACC,GACxBpB,EAAcxB,EAAS6C,KACvBD,EAAEE,kBACAX,UAAU,OAAOY,MAAM,UAAUT,KAAK,SAH1C,oBAOEpC,EAAU,cAAC,IAAD,CAAS6C,MAAM,YAAe,sB,iCCnG1D,qBAEeC,QAAMC,OAAO,CACxBC,QAAQ,2B,iCCJZ,iIAMaC,EAAe,SAACC,GAAD,OAC1B,eAAC,WAAD,WACE,qBAAKjB,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQkB,KAAK,KAAKN,MAAM,UAAUO,KAAM,cAAC,IAAD,CAAOD,KAAM,OACrD,oBAAIlB,UAAU,cAAd,2BAIJ,qBAAKA,UAAU,gBAAf,SACE,sBAAMoB,KAAK,MAAM,aAAW,aAA5B,SACGH,EAAMlC,aAOFsC,EAAa,SAACJ,GAAD,OACxB,eAAC,WAAD,WACE,qBAAKjB,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQkB,KAAK,KAAKN,MAAM,SAASO,KAAM,cAAC,IAAD,CAAGD,KAAM,OAChD,oBAAIlB,UAAU,cAAd,yBAIJ,qBAAKA,UAAU,gBAAf,SACE,sBAAMoB,KAAK,MAAM,aAAW,aAA5B,SACGH,EAAMlC,c","file":"static/js/86.c72d515f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { EditorState } from 'draft-js'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport Action from '../../middleware/API'\r\nimport { stateFromHTML } from 'draft-js-import-html'\r\nimport { stateToHTML } from 'draft-js-export-html'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n  Spinner\r\n} from 'reactstrap'\r\n\r\n\r\nconst EditPage = () => {\r\n  const { url } = useParams()\r\n  const [pageData, setPageData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [value, setValue] = useState(EditorState.createEmpty())\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const { data } = await Action.get(`/${ url }`)\r\n        setValue(EditorState.createWithContent(stateFromHTML(data.data.text)))\r\n        setPageData(data.data)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n\r\n    }\r\n    getData()\r\n  }, [])\r\n\r\n  //conveting the text from editor into plain html\r\n  const TextToHtml = stateToHTML(value.getCurrentContent())\r\n\r\n  //update data\r\n  const updateContent = async (id) => {\r\n    setLoading(true)\r\n    const res = await Action.put(`/${ url }/${ id }`, {\r\n      text: TextToHtml\r\n    })\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Content updated Successfully!\" />)\r\n      setLoading(false)\r\n      history.push('/page-setting')\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Edit Page</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Form>\r\n          <Row>\r\n            <Col sm='12'>\r\n              {/* service form */ }\r\n              <Label for='nameVerticalIcons'>Page Title</Label>\r\n              <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                <Input readOnly type='text' id='nameVerticalIcons' value={ pageData.title } placeholder='Enter your Page Title' />\r\n              </InputGroup>\r\n            </Col>\r\n\r\n            <Col sm='12' className=\"mt-2\">\r\n              {/* text editor */ }\r\n              <h6>Page Description </h6>\r\n              <Editor editorState={ value } onEditorStateChange={ data => setValue(data) } />\r\n            </Col>\r\n\r\n            <Col sm='12' className=\"mt-4\">\r\n              <FormGroup className='d-flex mb-0'>\r\n                <Button.Ripple onClick={ (e) => {\r\n                  updateContent(pageData._id)\r\n                  e.preventDefault()\r\n                } } className='mr-1' color='primary' type='submit'>\r\n                  Submit\r\n\r\n                </Button.Ripple>\r\n                { loading ? <Spinner color='primary' /> : null }\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\nexport default EditPage\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    // baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}