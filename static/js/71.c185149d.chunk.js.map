{"version":3,"sources":["views/product/Colors.js","middleware/API.js","views/components/toastify/index.js"],"names":["Colors","useState","modal","setModal","modal2","setModal2","colors","setColors","color","code","postColor","setPostColor","updateColor","setUpdateColor","loading","setLoading","loading2","setLoading2","did","setDid","useEffect","getColors","a","Action","get","data","console","log","toggleModalDanger","id","toggleModalPrimary","onChangeEvent","e","target","name","value","prev","onChangeEvent2","postColorAPI","preventDefault","post","res","success","toast","title","text","error","message","getSingleColor","putColor","put","deleteColor","delete","tag","sm","md","for","className","FormGroup","addonType","size","type","onChange","placeholder","Ripple","onClick","responsive","map","index","caret","right","href","_id","isOpen","toggle","modalClassName","axios","create","baseURL","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/71.c185149d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\nimport { MoreVertical, Edit, Trash, User } from 'react-feather'\r\nimport { VscSymbolColor } from 'react-icons/vsc'\r\nimport { IoColorWandOutline } from 'react-icons/io5'\r\nimport Action from \"../../middleware/API\"\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { Card, CardHeader, Form, Spinner, Row, Col, Label, InputGroup, FormGroup, InputGroupAddon, InputGroupText, Input, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button } from 'reactstrap'\r\n\r\nconst Colors = () => {\r\n  const [modal, setModal] = useState(null)\r\n  const [modal2, setModal2] = useState(null)\r\n  const [colors, setColors] = useState([])\r\n  const [postColor, setPostColor] = useState({\r\n    color: '',\r\n    code: ''\r\n  })\r\n  const [updateColor, setUpdateColor] = useState({\r\n    color: '',\r\n    code: ''\r\n  })\r\n  const [loading, setLoading] = useState(false)\r\n  const [loading2, setLoading2] = useState(false)\r\n  const [did, setDid] = useState('')\r\n  useEffect(() => {\r\n    const getColors = async () => {\r\n      try {\r\n        const { data } = await Action.get('/color')\r\n        setColors(data.data)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getColors()\r\n  }, [loading, loading2, modal])\r\n\r\n\r\n  const toggleModalDanger = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n  const toggleModalPrimary = id => {\r\n    if (modal2 !== id) {\r\n      setModal2(id)\r\n    } else {\r\n      setModal2(null)\r\n    }\r\n  }\r\n  const onChangeEvent = (e) => {\r\n    const { name, value } = e.target\r\n    setPostColor((prev) => {\r\n      return {\r\n        ...prev,\r\n        [name]: value\r\n      }\r\n    })\r\n\r\n  }\r\n  const onChangeEvent2 = (e) => {\r\n    const { name, value } = e.target\r\n\r\n    setUpdateColor((prev) => {\r\n      return {\r\n        ...prev,\r\n        [name]: value\r\n      }\r\n    })\r\n  }\r\n  const postColorAPI = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n    const res = await Action.post('/color', postColor)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Color Added Successfully!\" />)\r\n      setLoading(false)\r\n      setPostColor({\r\n        color: '',\r\n        code: ''\r\n      })\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  const getSingleColor = async (id) => {\r\n    try {\r\n      const { data } = await Action.get(`/color?_id=${ id }`)\r\n      const res = data.data[0]\r\n      setUpdateColor({\r\n        color: res.color,\r\n        code: res.code\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  //update color\r\n  const putColor = async (id) => {\r\n    setLoading2(true)\r\n    const res = await Action.put(`/color/${ id }`, updateColor)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Color Added Successfully!\" />)\r\n      setLoading2(false)\r\n      toggleModalPrimary(id)\r\n    } else {\r\n      setLoading2(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  //delete color\r\n  const deleteColor = async () => {\r\n    const res = await Action.delete(`/color?id=${ did }`)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Color Deleted Succesfully!\" />)\r\n      toggleModalDanger(did)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Add New Colors</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Form>\r\n            <Row>\r\n              <Col sm='12' md=\"6\">\r\n                {/* color form */ }\r\n                <Label for='color'>Color Name</Label>\r\n                <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                  <InputGroupAddon addonType='prepend'>\r\n                    <InputGroupText>\r\n                      <VscSymbolColor size={ 15 } />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input type='text' name='color' onChange={ (e) => onChangeEvent(e) } value={ postColor.color } id='color' placeholder='Enter your color name' />\r\n                </InputGroup>\r\n              </Col>\r\n              <Col sm='12' md=\"6\">\r\n                {/* color form */ }\r\n                <Label for='code'>Color Code</Label>\r\n                <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                  <InputGroupAddon addonType='prepend'>\r\n                    <InputGroupText>\r\n                      <IoColorWandOutline size={ 15 } />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input type='text' value={ postColor.code } onChange={ (e) => onChangeEvent(e) } name='code' id='code' placeholder='Enter your color code' />\r\n                </InputGroup>\r\n              </Col>\r\n              <Col sm='12' className=\"\">\r\n                <FormGroup className='d-flex mb-0'>\r\n                  <Button.Ripple className='mx-1' color='primary' type='submit' onClick={ e => postColorAPI(e) }>\r\n                    Submit\r\n                  </Button.Ripple>\r\n                  { loading ? <Spinner color=\"primary\" /> : null }\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>All Colors</CardTitle>\r\n\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Color Name</th>\r\n                <th>Color Code</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                colors.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index }>\r\n                      <td>\r\n                        { value.color }\r\n                      </td>\r\n\r\n                      <td>{ value.code }</td>\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              getSingleColor(value._id)\r\n                              e.preventDefault()\r\n                              toggleModalPrimary(value._id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } />  <span className='align-middle'>Edit</span>\r\n                            </DropdownItem>\r\n\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              setDid(value._id)\r\n                              toggleModalDanger(value._id)\r\n                            } }>\r\n                              <Trash className='mr-50' size={ 15 } /> <span className='align-middle'>Delete</span>\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <Modal\r\n                          isOpen={ modal2 === value._id }\r\n                          toggle={ () => toggleModalPrimary(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value._id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n                                <Col sm='12' md=\"6\">\r\n                                  {/* color form */ }\r\n                                  <Label for='color'>Color Name</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <VscSymbolColor size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' name='color' value={ updateColor.color } onChange={ (e) => onChangeEvent2(e) } id='color' placeholder='Enter your color name' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                                <Col sm='12' md=\"6\">\r\n                                  {/* color form */ }\r\n                                  <Label for='code'>Color Code</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <IoColorWandOutline size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' value={ updateColor.code } onChange={ (e) => onChangeEvent2(e) } name='code' id='code' placeholder='Enter your color code' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <FormGroup className='d-flex mb-0'>\r\n                              <Button color=\"primary\" onClick={ () => putColor(value._id) }>\r\n                                Submit\r\n                              </Button>\r\n                              { loading2 ? <Spinner color=\"primary\" /> : null }\r\n                            </FormGroup>\r\n\r\n                          </ModalFooter>\r\n                        </Modal>\r\n\r\n                        {/* delete modal */ }\r\n                        <Modal\r\n                          isOpen={ modal === value._id }\r\n                          toggle={ () => toggleModalDanger(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-danger\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalDanger(value._id) }>Delete</ModalHeader>\r\n                          <ModalBody>\r\n                            Are you sure you want to delete this?\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <Button color=\"danger\" onClick={ () => deleteColor(value._id) }>\r\n                              delete\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n\r\n\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default Colors\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    // baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}