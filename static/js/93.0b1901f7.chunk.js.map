{"version":3,"sources":["views/front-end/header/index.js","middleware/API.js","views/components/toastify/index.js"],"names":["Header","useState","modal2","setModal2","loading","setloading","text","file","button_text","link","body","setBody","toggleModalPrimary","id","topHeader","setTopHeader","fetchTopHeaderData","a","Action","get","data","success","image","useEffect","FormData","put","_id","res","toast","title","error","message","append","responsive","map","value","index","src","baseURL","height","width","className","color","size","caret","right","href","onClick","e","preventDefault","isOpen","toggle","modalClassName","sm","for","tag","FormGroup","addonType","type","onChange","target","placeholder","files","name","updateHeader","axios","create","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/93.0b1901f7.chunk.js","sourcesContent":["\r\nimport { useEffect, useState } from 'react'\r\nimport { MoreVertical, Edit, User } from 'react-feather'\r\nimport { BsFillMenuButtonFill } from 'react-icons/bs'\r\nimport { FaTextWidth } from 'react-icons/fa'\r\nimport { Card, CustomInput, Spinner, Form, Row, Col, Label, InputGroup, FormGroup, InputGroupAddon, InputGroupText, Input, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button } from 'reactstrap'\r\nimport Action from '../../../middleware/API'\r\nimport baseURL from '../../../middleware/BaseURL'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\nconst Header = () => {\r\n  const [modal2, setModal2] = useState(null)\r\n  const [loading, setloading] = useState(false)\r\n  const [body, setBody] = useState({\r\n    text: \"\",\r\n    file: {},\r\n    button_text: \"\",\r\n    link: \"\"\r\n  })\r\n  const toggleModalPrimary = id => {\r\n    if (modal2 !== id) {\r\n      setModal2(id)\r\n    } else {\r\n      setModal2(null)\r\n    }\r\n  }\r\n\r\n  //API INTEGRATION\r\n  //GET DATA\r\n  const [topHeader, setTopHeader] = useState([])\r\n  async function fetchTopHeaderData() {\r\n    const { data } = await Action.get(\"/topheader\", {})\r\n    if (data.success === true) {\r\n      setTopHeader(data.data)\r\n      setBody({\r\n        text: data.data[0].text,\r\n        file: data.data[0].image,\r\n        button_text: data.data[0].button_text,\r\n        link: data.data[0].link\r\n      })\r\n      // console.log(topHeader)\r\n    } else {\r\n      setTopHeader([])\r\n    }\r\n  }\r\n\r\n  useEffect(async () => {\r\n    fetchTopHeaderData()\r\n  }, [modal2])\r\n\r\n  //UPDATE DATA \r\n  const data = new FormData()\r\n  data.append('text', body.text)\r\n  data.append('button_text', body.button_text)\r\n  data.append('file', body.file)\r\n  async function updateHeader() {\r\n    setloading(true)\r\n    const res = await Action.put(`/topheader/${ topHeader[0]._id }`, data, {})\r\n    if (res.data.success === true) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Top Header updated Successfully!\" />)\r\n      setModal2(null)\r\n      setloading(false)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n      setloading(false)\r\n\r\n\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Header</CardTitle>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Text</th>\r\n                <th>Image</th>\r\n                <th>Button Text</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                topHeader.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index }>\r\n                      <td>\r\n                        { value.text }\r\n                      </td>\r\n\r\n                      <td> <img src={ baseURL + value.image } height=\"40\" width=\"40\" /></td>\r\n                      <td>{ value.button_text }</td>\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalPrimary(value.id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } /> <span className='align-middle'>Edit</span>\r\n                            </DropdownItem>\r\n\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <Modal\r\n                          isOpen={ modal2 === value.id }\r\n                          toggle={ () => toggleModalPrimary(value.id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value.id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value.id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n                                <Col sm='12' >\r\n                                  {/* color form */ }\r\n                                  <Label for='text'>Header Text</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <FaTextWidth size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' value={ body.text } id='text' onChange={ (e) => {\r\n                                      setBody({ ...body, text: e.target.value })\r\n                                    }\r\n                                    }\r\n                                      placeholder='Enter your text' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                                <Col sm='12'>\r\n                                  <FormGroup>\r\n                                    <Label for='icon'>Header Image</Label>\r\n                                    <CustomInput type='file' id='icon' onChange={ (e) => {\r\n                                      setBody({ ...body, file: e.target.files[0] })\r\n                                    }\r\n                                    }\r\n                                      name='customFile' />\r\n                                  </FormGroup>\r\n                                </Col>\r\n                                <Col sm='12' >\r\n                                  {/* color form */ }\r\n                                  <Label for='btn'>Button Text</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <BsFillMenuButtonFill size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' id='btn' value={ body.button_text } onChange={ (e) => {\r\n                                      setBody({ ...body, button_text: e.target.value })\r\n                                    }\r\n                                    }\r\n                                      placeholder='Enter your button text' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                                <Col sm='12' >\r\n                                  {/* color form */ }\r\n                                  <Label for='url'>Button Url</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <BsFillMenuButtonFill size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' id='url' value={ body.link } onChange={ (e) => {\r\n                                      setBody({ ...body, link: e.target.value })\r\n                                    }\r\n                                    }\r\n                                      placeholder='Enter your button link' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n\r\n                            <Button color=\"primary\" className='d-flex' onClick={ () => updateHeader() }>\r\n                              Submit\r\n\r\n                            </Button>\r\n                            { loading ? <Spinner color='primary' /> : null }\r\n                          </ModalFooter>\r\n                        </Modal>\r\n\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default Header","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    // baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}