{"version":3,"sources":["views/settings/Smtp.js","middleware/API.js","views/components/toastify/index.js"],"names":["GeneralSettings","useState","loading","setLoading","id","setId","Host","port","username","pasword","mail_address","mail_name","smtp","setSmtp","useEffect","getSmtp","a","Action","get","data","res","_id","console","log","eventOnChange","e","target","name","value","prev","UpdateSmpt","preventDefault","put","acknowledged","setTimeout","toast","success","title","text","error","tag","className","md","sm","for","onChange","type","placeholder","Ripple","color","onClick","axios","create","baseURL","SuccessToast","props","size","icon","role","ErrorToast"],"mappings":"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","file":"static/js/95.f90247cd.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Label,\r\n  Spinner\r\n} from 'reactstrap'\r\nimport Action from '../../middleware/API'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\nconst GeneralSettings = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [id, setId] = useState('')\r\n  const [smtp, setSmtp] = useState({\r\n    Host: \"\",\r\n    port: null,\r\n    username: \"\",\r\n    pasword: \"\",\r\n    mail_address: \"\",\r\n    mail_name: \"\"\r\n  })\r\n  useEffect(() => {\r\n    //using promise \r\n    const getSmtp = async () => {\r\n      //if else\r\n      try {\r\n        const { data } = await Action.get('/smtp')\r\n        const res = data.data[0]\r\n        setSmtp({\r\n          Host: res.Host,\r\n          port: res.port,\r\n          username: res.username,\r\n          pasword: res.pasword,\r\n          mail_address: res.mail_address,\r\n          mail_name: res.mail_name\r\n        })\r\n        setId(res._id)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getSmtp()\r\n  }, [])\r\n  const eventOnChange = (e) => {\r\n    const { name, value } = e.target\r\n    setSmtp((prev) => {\r\n      return {\r\n        ...prev,\r\n        [name]: value\r\n      }\r\n    })\r\n  }\r\n  //put api \r\n  const UpdateSmpt = async (e) => {\r\n    e.preventDefault()\r\n    const res = await Action.put(`/smtp/${ id }`, smtp, {})\r\n    setLoading(true)\r\n    if (res.data.data.acknowledged) {\r\n      setTimeout(() => {\r\n        toast.success(<SuccessToast title=\"Success\" text=\"Smtp settings updated Successfully!\" />)\r\n        setLoading(false)\r\n      }, 1000)\r\n\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>SMTP Configuration</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Form>\r\n          <Row>\r\n            <Col className='mb-1' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-HOST'>MAIL HOST</Label>\r\n                <Input onChange={ eventOnChange } name=\"Host\" value={ smtp.Host } type='text' id='MAIL-HOST' placeholder='Enter Your MAIL HOST' />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className='mb-1' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-PORT'>MAIL PORT</Label>\r\n                <Input onChange={ eventOnChange } name=\"port\" value={ smtp.port } type='text' id='MAIL-PORT' placeholder='Enter Your MAIL PORT' />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className='mb-1' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-USERNAME'>MAIL USERNAME</Label>\r\n                <Input onChange={ eventOnChange } name=\"username\" value={ smtp.username } type='text' id='MAIL-USERNAME' placeholder='Enter Your MAIL USERNAME' />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className='mb-1' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-PASSWORD'>MAIL PASSWORD</Label>\r\n                <Input onChange={ eventOnChange } name=\"pasword\" value={ smtp.pasword } type='password' id='MAIL-PASSWORD' placeholder='Enter Your MAIL PASSWORD' />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className='' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-ADDRESS'>MAIL FROM ADDRESS</Label>\r\n                <Input onChange={ eventOnChange } name=\"mail_address\" value={ smtp.mail_address } type='email' id='MAIL-ADDRESS' placeholder='Enter Your MAIL FROM ADDRESS' />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className='' md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='MAIL-NAME'>MAIL FROM NAME</Label>\r\n                <Input onChange={ eventOnChange } name=\"mail_name\" value={ smtp.mail_name } type='email' id='MAIL-NAME' placeholder='Enter Your MAIL FROM NAME' />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col sm='12' className=\"mt-2\">\r\n              <FormGroup className='d-flex mb-0'>\r\n                <Button.Ripple className='mr-1' color='primary' type='submit' onClick={ e => UpdateSmpt(e) }>\r\n                  Submit\r\n                </Button.Ripple>\r\n                {/* spinner */ }\r\n                { loading ? <Spinner color='primary' /> : null }\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\nexport default GeneralSettings","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    // baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}