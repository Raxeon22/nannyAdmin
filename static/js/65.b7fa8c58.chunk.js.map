{"version":3,"sources":["views/attribute/Name.js","middleware/API.js","views/components/toastify/index.js"],"names":["AttributeNames","useState","modal","setModal","modal2","setModal2","names","setNames","postName","setPostName","updateName","setUpdateName","loading","setLoading","loading2","setLoading2","useEffect","getAttNames","a","Action","get","data","console","log","toggleModalDanger","id","toggleModalPrimary","postAttribute","e","preventDefault","post","Attribute","res","success","toast","title","text","error","message","getSingleAttribute","attribute","deleteAttribute","delete","putAttName","put","tag","sm","for","className","FormGroup","addonType","size","onChange","currentTarget","value","type","placeholder","Ripple","color","onClick","responsive","map","index","caret","right","href","_id","isOpen","toggle","modalClassName","name","axios","create","baseURL","SuccessToast","props","icon","role","ErrorToast"],"mappings":"mgBAmPeA,UAtOQ,WACrB,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAoCR,mBAAS,IAA7C,mBAAOS,GAAP,KAAmBC,GAAnB,KACA,GAA8BV,oBAAS,GAAvC,qBAAOW,GAAP,MAAgBC,GAAhB,MACA,GAAgCZ,oBAAS,GAAzC,qBAAOa,GAAP,MAAiBC,GAAjB,MAGAC,qBAAU,WACR,IAAMC,EAAW,uCAAG,8BAAAC,EAAA,+EAEOC,IAAOC,IAAI,cAFlB,gBAERC,EAFQ,EAERA,KACRd,EAASc,EAAKA,MAHE,gDAKhBC,QAAQC,IAAR,MALgB,yDAAH,qDAQjBN,MACC,CAACL,GAASE,GAAUZ,IAGvB,IAAMsB,GAAoB,SAAAC,GAEtBtB,EADED,IAAUuB,EACHA,EAEA,OAGPC,GAAqB,SAAAD,GAEvBpB,EADED,IAAWqB,EACHA,EAEA,OAIRE,GAAa,uCAAG,WAAOC,GAAP,eAAAV,EAAA,6DACpBU,EAAEC,iBACFhB,IAAW,GAFS,SAGFM,IAAOW,KAAK,aAAc,CAC1CC,UAAWvB,IAJO,QAGdwB,EAHc,QAMZX,KAAKY,SACXC,IAAMD,QAAQ,cAAC,IAAD,CAAcE,MAAM,UAAUC,KAAK,mCACjDvB,IAAW,GACXJ,EAAY,MAEZI,IAAW,GACXqB,IAAMG,MAAM,cAAC,IAAD,CAAYF,MAAM,QAAQC,KAAOJ,EAAIX,KAAKiB,YAZpC,2CAAH,sDAgBbC,GAAkB,uCAAG,WAAOd,GAAP,mBAAAP,EAAA,+EAEAC,IAAOC,IAAP,yBAA8BK,IAF9B,gBAEfJ,EAFe,EAEfA,KACFW,EAAMX,EAAKA,KAAK,GACtBV,GAAcqB,EAAIQ,WAJK,gDAMvBlB,QAAQC,IAAR,MANuB,yDAAH,sDAUlBkB,GAAe,uCAAG,WAAOhB,GAAP,eAAAP,EAAA,sEACJC,IAAOuB,OAAP,wBAAgCjB,IAD5B,QAChBO,EADgB,QAEdX,KAAKY,SACXC,IAAMD,QAAQ,cAAC,IAAD,CAAcE,MAAM,UAAUC,KAAK,oCACjDZ,GAAkBC,IAElBS,IAAMG,MAAM,cAAC,IAAD,CAAYF,MAAM,QAAQC,KAAOJ,EAAIX,KAAKiB,WANlC,2CAAH,sDAUfK,GAAU,uCAAG,WAAOlB,GAAP,eAAAP,EAAA,6DACjBH,IAAY,GADK,SAECI,IAAOyB,IAAP,qBAA0BnB,GAAO,CACjDe,UAAW9B,KAHI,QAEXsB,EAFW,QAKTX,KAAKY,SACXC,IAAMD,QAAQ,cAAC,IAAD,CAAcE,MAAM,UAAUC,KAAK,mCACjDrB,IAAY,GACZW,GAAmBD,KAEnBV,IAAY,GACZmB,IAAMG,MAAM,cAAC,IAAD,CAAYF,MAAM,QAAQC,KAAOJ,EAAIX,KAAKiB,YAXvC,2CAAH,sDAchB,OACE,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWO,IAAI,KAAf,sCAEF,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAKC,GAAG,KAAR,UAEE,cAAC,IAAD,CAAOC,IAAI,WAAX,4BACA,eAAC,IAAD,CAAYC,UAAU,oBAAoBH,IAAMI,IAAhD,UACE,cAAC,IAAD,CAAiBC,UAAU,UAA3B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeC,KAAO,SAG1B,cAAC,IAAD,CAAOC,SAAW,SAACxB,GAAD,OAAOnB,EAAYmB,EAAEyB,cAAcC,QAASA,MAAQ9C,EAAW+C,KAAK,OAAOC,YAAY,mCAG7G,cAAC,IAAD,CAAKV,GAAG,KAAKE,UAAU,GAAvB,SACE,eAAC,IAAD,CAAWA,UAAU,cAArB,UACE,cAAC,IAAOS,OAAR,CAAeT,UAAU,OAAOU,MAAM,UAAUH,KAAK,SAASI,QAAU,SAAA/B,GAAC,OAAID,GAAcC,IAA3F,oBAGEhB,GAAU,cAAC,IAAD,CAAS8C,MAAM,YAAe,oBAOtD,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,kCAEA,eAAC,IAAD,CAAOE,YAAU,EAAjB,UACE,gCACE,+BACE,gDACA,8CAGJ,gCAEItD,EAAMuD,KAAI,SAACP,EAAOQ,GAChB,OACE,+BACE,6BACIR,EAAMd,YAGV,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAgBQ,UAAU,sBAAsBU,MAAM,cAAcP,KAAK,KAAKY,OAAK,EAAnF,SACE,cAAC,IAAD,CAAcZ,KAAO,OAEvB,eAAC,IAAD,CAAca,OAAK,EAAnB,UACE,eAAC,IAAD,CAAcC,KAAK,IAAIN,QAAU,SAAC/B,GAChCW,GAAmBe,EAAMY,KACzBtC,EAAEC,iBACFH,GAAmB4B,EAAMY,MAH3B,UAKE,cAAC,IAAD,CAAMlB,UAAU,QAAQG,KAAO,KALjC,KAK0C,sBAAMH,UAAU,eAAhB,qBAG1C,eAAC,IAAD,CAAciB,KAAK,IAAIN,QAAU,SAAC/B,GAChCA,EAAEC,iBACFL,GAAkB8B,EAAMY,MAF1B,UAIE,cAAC,IAAD,CAAOlB,UAAU,QAAQG,KAAO,KAJlC,IAI0C,sBAAMH,UAAU,eAAhB,6BAI9C,eAAC,IAAD,CACEmB,OAAS/D,IAAWkD,EAAMY,IAC1BE,OAAS,kBAAM1C,GAAmB4B,EAAMY,MACxClB,UAAU,wBACVqB,eAAe,gBAJjB,UAME,cAAC,IAAD,CAAaD,OAAS,kBAAM1C,GAAmB4B,EAAMY,MAArD,kBACA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAKpB,GAAG,KAAR,UAEE,cAAC,IAAD,CAAOC,IAAI,WAAX,4BACA,eAAC,IAAD,CAAYC,UAAU,oBAAoBH,IAAMI,IAAhD,UACE,cAAC,IAAD,CAAiBC,UAAU,UAA3B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeC,KAAO,SAG1B,cAAC,IAAD,CAAOI,KAAK,OAAOe,KAAK,OAAOhB,MAAQ5C,GAAa0C,SAAW,SAACxB,GAAD,OAAOjB,GAAciB,EAAEyB,cAAcC,QAASE,YAAY,yCAOnI,eAAC,IAAD,WAEE,cAAC,IAAD,CAAQE,MAAM,UAAUC,QAAU,kBAAMhB,GAAWW,EAAMY,MAAzD,oBAGEpD,GAAW,cAAC,IAAD,CAAS4C,MAAM,YAAe,UA1BvCJ,EAAMY,KAgCd,eAAC,IAAD,CACEC,OAASjE,IAAUoD,EAAMY,IACzBE,OAAS,kBAAM5C,GAAkB8B,EAAMY,MACvClB,UAAU,wBACVqB,eAAe,eAJjB,UAME,cAAC,IAAD,CAAaD,OAAS,kBAAM5C,GAAkB8B,EAAMY,MAApD,oBACA,cAAC,IAAD,oDAGA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQR,MAAM,SAASC,QAAU,kBAAMlB,GAAgBa,EAAMY,MAA7D,wBANIZ,EAAMY,UArERJ,EAAQR,EAAMY,uB,iCCpJ5C,qBAEeK,QAAMC,OAAO,CAIxBC,QAAQ,+C,iCCPZ,iIAMaC,EAAe,SAACC,GAAD,OAC1B,eAAC,WAAD,WACE,qBAAK3B,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQG,KAAK,KAAKO,MAAM,UAAUkB,KAAM,cAAC,IAAD,CAAOzB,KAAM,OACrD,oBAAIH,UAAU,cAAd,2BAIJ,qBAAKA,UAAU,gBAAf,SACE,sBAAM6B,KAAK,MAAM,aAAW,aAA5B,SACGF,EAAMvC,aAOF0C,EAAa,SAACH,GAAD,OACxB,eAAC,WAAD,WACE,qBAAK3B,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQG,KAAK,KAAKO,MAAM,SAASkB,KAAM,cAAC,IAAD,CAAGzB,KAAM,OAChD,oBAAIH,UAAU,cAAd,yBAIJ,qBAAKA,UAAU,gBAAf,SACE,sBAAM6B,KAAK,MAAM,aAAW,aAA5B,SACGF,EAAMvC,c","file":"static/js/65.b7fa8c58.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\nimport { MoreVertical, Edit, Trash, User } from 'react-feather'\r\nimport { CgAttribution } from 'react-icons/cg'\r\nimport Action from \"../../middleware/API\"\r\nimport { Card, CardHeader, Form, Row, Col, Label, InputGroup, FormGroup, InputGroupAddon, InputGroupText, Input, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button, Spinner } from 'reactstrap'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\nconst AttributeNames = () => {\r\n  const [modal, setModal] = useState(null)\r\n  const [modal2, setModal2] = useState(null)\r\n  const [names, setNames] = useState([])\r\n  const [postName, setPostName] = useState('')\r\n  const [updateName, setUpdateName] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [loading2, setLoading2] = useState(false)\r\n\r\n  //get att names\r\n  useEffect(() => {\r\n    const getAttNames = async () => {\r\n      try {\r\n        const { data } = await Action.get('/attribute')\r\n        setNames(data.data)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getAttNames()\r\n  }, [loading, loading2, modal])\r\n\r\n\r\n  const toggleModalDanger = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n  const toggleModalPrimary = id => {\r\n    if (modal2 !== id) {\r\n      setModal2(id)\r\n    } else {\r\n      setModal2(null)\r\n    }\r\n  }\r\n  //post Attribute\r\n  const postAttribute = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n    const res = await Action.post('/attribute', {\r\n      Attribute: postName\r\n    })\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Attribute Added Successfully!\" />)\r\n      setLoading(false)\r\n      setPostName('')\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  //get single\r\n  const getSingleAttribute = async (id) => {\r\n    try {\r\n      const { data } = await Action.get(`/attribute?_id=${ id }`)\r\n      const res = data.data[0]\r\n      setUpdateName(res.attribute)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  //delete api\r\n  const deleteAttribute = async (id) => {\r\n    const res = await Action.delete(`/attribute?id=${ id }`)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Attribute Deleted Succesfully!\" />)\r\n      toggleModalDanger(id)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  //update Name\r\n  const putAttName = async (id) => {\r\n    setLoading2(true)\r\n    const res = await Action.put(`/attribute/${ id }`, {\r\n      attribute: updateName\r\n    })\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"attribute Added Successfully!\" />)\r\n      setLoading2(false)\r\n      toggleModalPrimary(id)\r\n    } else {\r\n      setLoading2(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Add New Attribute Name</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Form>\r\n            <Row>\r\n              <Col sm='12' >\r\n                {/* color form */ }\r\n                <Label for='att-name'>Attribute Name</Label>\r\n                <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                  <InputGroupAddon addonType='prepend'>\r\n                    <InputGroupText>\r\n                      <CgAttribution size={ 15 } />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input onChange={ (e) => setPostName(e.currentTarget.value) } value={ postName } type='text' placeholder='Enter your Attibute name' />\r\n                </InputGroup>\r\n              </Col>\r\n              <Col sm='12' className=\"\">\r\n                <FormGroup className='d-flex mb-0'>\r\n                  <Button.Ripple className='mr-1' color='primary' type='submit' onClick={ e => postAttribute(e) }>\r\n                    Submit\r\n                  </Button.Ripple>\r\n                  { loading ? <Spinner color=\"primary\" /> : null }\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>All Attribute Names</CardTitle>\r\n\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Attribute Name</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                names.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index + value._id }>\r\n                      <td>\r\n                        { value.attribute }\r\n                      </td>\r\n\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              getSingleAttribute(value._id)\r\n                              e.preventDefault()\r\n                              toggleModalPrimary(value._id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } />  <span className='align-middle'>Edit</span>\r\n                            </DropdownItem>\r\n\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalDanger(value._id)\r\n                            } }>\r\n                              <Trash className='mr-50' size={ 15 } /> <span className='align-middle'>Delete</span>\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <Modal\r\n                          isOpen={ modal2 === value._id }\r\n                          toggle={ () => toggleModalPrimary(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value._id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n                                <Col sm='12' >\r\n                                  {/* color form */ }\r\n                                  <Label for='att-name'>Attribute Name</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <CgAttribution size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' name='name' value={ updateName } onChange={ (e) => setUpdateName(e.currentTarget.value) } placeholder='Enter your Attibute name' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n\r\n                            <Button color=\"primary\" onClick={ () => putAttName(value._id) }>\r\n                              Submit\r\n                            </Button>\r\n                            { loading2 ? <Spinner color=\"primary\" /> : null }\r\n\r\n                          </ModalFooter>\r\n                        </Modal>\r\n\r\n                        {/* delete modal */ }\r\n                        <Modal\r\n                          isOpen={ modal === value._id }\r\n                          toggle={ () => toggleModalDanger(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-danger\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalDanger(value._id) }>Delete</ModalHeader>\r\n                          <ModalBody>\r\n                            Are you sure you want to delete this?\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <Button color=\"danger\" onClick={ () => deleteAttribute(value._id) }>\r\n                              delete\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n\r\n\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default AttributeNames\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    // baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}