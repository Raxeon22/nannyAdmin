{"version":3,"sources":["views/attribute/Value.js","middleware/API.js","views/components/toastify/index.js"],"names":["ServiceForm","useState","modal","setModal","attValues","setAttValues","attNames","setAttNames","loading","setLoading","value","attribute","postAtts","setpostAtts","useEffect","getAttValues","a","Action","get","data","console","log","getAttNames","map","item","index","_id","label","getAttNbyIdf","toggleModalDanger","id","postAttributes","e","preventDefault","post","res","success","toast","title","text","error","message","deleteAttribute","delete","tag","sm","md","for","className","FormGroup","addonType","size","type","onChange","target","name","placeholder","theme","selectThemeColors","classNamePrefix","defaultValue","options","isClearable","Ripple","color","onClick","responsive","caret","right","href","isOpen","toggle","modalClassName","axios","create","baseURL","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/66.d465b36a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\nimport { MoreVertical, Edit, Trash, User } from 'react-feather'\r\nimport { selectThemeColors } from '@utils'\r\nimport Select from 'react-select'\r\nimport Action from \"../../middleware/API\"\r\nimport { CgAttribution } from 'react-icons/cg'\r\nimport { Card, CardHeader, Form, Row, Col, Label, InputGroup, FormGroup, InputGroupAddon, InputGroupText, Input, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button, Spinner } from 'reactstrap'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\n\r\nconst ServiceForm = () => {\r\n  const [modal, setModal] = useState(null)\r\n  const [modal2, setModal2] = useState(null)\r\n  const [attValues, setAttValues] = useState([])\r\n  const [attNames, setAttNames] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [postAtts, setpostAtts] = useState([\r\n    {\r\n      value: '',\r\n      attribute: ''\r\n    }\r\n  ])\r\n  //get att names\r\n  useEffect(() => {\r\n    const getAttValues = async () => {\r\n      try {\r\n        const { data } = await Action.get('/attribute/value')\r\n        setAttValues(data.data)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getAttValues()\r\n\r\n    const getAttNames = async () => {\r\n      try {\r\n        const { data } = await Action.get('/attribute')\r\n        setAttNames(data.data)\r\n        data.data.map((item, index) => {\r\n          data.data[index].value = item._id\r\n          data.data[index].label = item.attribute\r\n        })\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getAttNames()\r\n    const getAttNbyIdf = async () => {\r\n      try {\r\n        const { data } = await Action.get('/attribute')\r\n        setAttNames(data.data)\r\n        data.data.map((item, index) => {\r\n          data.data[index].value = item._id\r\n          data.data[index].label = item.attribute\r\n        })\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getAttNbyIdf()\r\n  }, [loading, modal])\r\n\r\n  const toggleModalDanger = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n  const toggleModalPrimary = id => {\r\n    if (modal2 !== id) {\r\n      setModal2(id)\r\n    } else {\r\n      setModal2(null)\r\n    }\r\n  }\r\n  //post Attribute\r\n  const postAttributes = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n    const res = await Action.post('/attribute/value',\r\n      {\r\n        value: postAtts.attribute,\r\n        attribute: [postAtts.value]\r\n      }\r\n    )\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Attribute Added Successfully!\" />)\r\n      setLoading(false)\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  //delete api\r\n  const deleteAttribute = async (id) => {\r\n    const res = await Action.delete(`/attribute/value?id=${ id }`)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Attribute Deleted Succesfully!\" />)\r\n      toggleModalDanger(id)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Add New Attribute Value</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Form>\r\n            <Row>\r\n              <Col sm='12' md=\"6\">\r\n                {/* value form */ }\r\n                <Label for='att-name'>Attribute Value</Label>\r\n                <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                  <InputGroupAddon addonType='prepend'>\r\n                    <InputGroupText>\r\n                      <CgAttribution size={ 15 } />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input type='text' onChange={ (e) => setpostAtts({ ...postAtts, attribute: e.target.value }) } value={ postAtts.attribute } name='name' id='att-name' placeholder='Enter your Attibute name' />\r\n                </InputGroup>\r\n              </Col>\r\n              <Col className='mb-1' md='6' sm='12'>\r\n                <Label>Attribute Name</Label>\r\n                <Select\r\n                  theme={ selectThemeColors }\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  defaultValue={ postAtts.value }\r\n                  options={ attNames }\r\n                  isClearable={ false }\r\n                  onChange={ (e) => setpostAtts({ ...postAtts, value: e.value }) }\r\n\r\n                />\r\n              </Col>\r\n              <Col sm='12' className=\"\">\r\n                <FormGroup className='d-flex mb-0'>\r\n                  <Button.Ripple className='mr-1' color='primary' type='submit' onClick={ e => postAttributes(e) }>\r\n                    Submit\r\n                  </Button.Ripple>\r\n                  { loading ? <Spinner color=\"primary\" /> : null }\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>All Attribute Values</CardTitle>\r\n\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Attribute Value</th>\r\n                <th>Attribute Id</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                attValues.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index }>\r\n                      <td>\r\n                        { value.value }\r\n                      </td>\r\n\r\n                      <td>{ value.attribute[0] }</td>\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            {/* <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalPrimary(value._id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } />  <span className='align-middle'>Edit</span>\r\n                            </DropdownItem> */}\r\n\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalDanger(value._id)\r\n\r\n                            } }>\r\n                              <Trash className='mr-50' size={ 15 } /> <span className='align-middle'>Delete</span>\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        {/* <Modal\r\n                          isOpen={ modal2 === value._id }\r\n                          toggle={ () => toggleModalPrimary(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value._id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n\r\n                                <Col className='mb-1' md='6' sm='12'>\r\n                                  <Label>Attribute Name</Label>\r\n                                  <Select\r\n                                    theme={ selectThemeColors }\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    defaultValue={ attributeNames[0] }\r\n                                    options={ attributeNames }\r\n                                    isClearable={ false }\r\n                                  />\r\n                                </Col>\r\n                                <Col sm='12' md=\"6\">\r\n                                  <Label for='att-name'>Attribute Value</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <CgAttribution size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' name='name' id='att-name' placeholder='Enter your Attibute name' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n\r\n                            <Button color=\"primary\" onClick={ () => toggleModalPrimary(value._id) }>\r\n                              Submit\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal> */}\r\n\r\n                        {/* delete modal */ }\r\n                        <Modal\r\n                          isOpen={ modal === value._id }\r\n                          toggle={ () => toggleModalDanger(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-danger\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalDanger(value._id) }>Delete</ModalHeader>\r\n                          <ModalBody>\r\n                            Are you sure you want to delete this?\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <Button color=\"danger\" onClick={ () => deleteAttribute(value._id) }>\r\n                              delete\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n\r\n\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default ServiceForm\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    // baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}