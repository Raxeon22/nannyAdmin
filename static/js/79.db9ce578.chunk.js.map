{"version":3,"sources":["views/banners/Desktop.js","middleware/API.js","views/components/toastify/index.js"],"names":["DesktopBanner","useState","modal","setModal","modal2","setModal2","modal3","setModal3","banners","setBanners","preview","setPreview","preview2","setPreview2","lang","setLang","useEffect","getBanners","a","Action","get","data","console","log","toggleModalDanger","id","toggleModalPrimary","toggleAddNew","uploadImg","setUploadImg","editImg","setEditImg","uppy","Uppy","meta","type","restrictions","maxNumberOfFiles","autoProceed","use","thumbnailGenerator","on","file","uppyEdit","uploadData","FormData","append","postBanner","e","preventDefault","post","success","toast","title","text","error","deleteBanner","delete","res","editFile","updateBanner","put","className","defaultValue","options","value","label","style","width","onChange","color","onClick","isOpen","toggle","modalClassName","sm","src","alt","responsive","map","index","baseURL","image","height","size","caret","right","href","_id","axios","create","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/79.db9ce578.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Uppy from '@uppy/core'\r\nimport thumbnailGenerator from '@uppy/thumbnail-generator'\r\nimport { DragDrop } from '@uppy/react'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\nimport Select from 'react-select'\r\nimport { MoreVertical, Edit, Trash } from 'react-feather'\r\nimport Action from '../../middleware/API'\r\nimport baseURL from '../../middleware/BaseURL'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { Card, Form, Row, Col, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button } from 'reactstrap'\r\n\r\n\r\nconst DesktopBanner = () => {\r\n  const [modal, setModal] = useState(null)\r\n  const [modal2, setModal2] = useState(null)\r\n  const [modal3, setModal3] = useState(null)\r\n  const [banners, setBanners] = useState([])\r\n  //previews\r\n  const [preview, setPreview] = useState([])\r\n  const [preview2, setPreview2] = useState([])\r\n\r\n  const [lang, setLang] = useState('French')\r\n\r\n  useEffect(() => {\r\n    const getBanners = async () => {\r\n      const { data } = await Action.get(`/banner/web?lang=${ lang }`)\r\n      setBanners(data.data)\r\n      console.log(data)\r\n    }\r\n    getBanners()\r\n  }, [modal, modal2, modal3])\r\n\r\n  const toggleModalDanger = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n  const toggleModalPrimary = id => {\r\n    if (modal2 !== id) {\r\n      setModal2(id)\r\n    } else {\r\n      setModal2(null)\r\n    }\r\n  }\r\n  const toggleAddNew = id => {\r\n    if (modal3 !== id) {\r\n      setModal3(id)\r\n    } else {\r\n      setModal3(null)\r\n    }\r\n  }\r\n  const langs = [\r\n    {\r\n      value: 'French',\r\n      label: 'French'\r\n    },\r\n    {\r\n      value: 'English',\r\n      label: 'English'\r\n    }\r\n\r\n\r\n  ]\r\n  //file uploader\r\n  const [uploadImg, setUploadImg] = useState(null)\r\n  const [editImg, setEditImg] = useState(null)\r\n\r\n  const uppy = new Uppy({\r\n    meta: { type: 'avatar' },\r\n    restrictions: { maxNumberOfFiles: 1 },\r\n    autoProceed: true\r\n  })\r\n  //file upload to add new banner\r\n  uppy.use(thumbnailGenerator)\r\n\r\n  uppy.on('thumbnail:generated', (file, preview) => {\r\n    setUploadImg(file.data)\r\n    setPreview2(preview)\r\n  })\r\n  const uppyEdit = new Uppy({\r\n    meta: { type: 'avatar' },\r\n    restrictions: { maxNumberOfFiles: 1 },\r\n    autoProceed: true\r\n  })\r\n\r\n  // file upload to updated banner\r\n  uppyEdit.use(thumbnailGenerator)\r\n\r\n  uppyEdit.on('thumbnail:generated', (file, preview) => {\r\n    setEditImg(file.data)\r\n    setPreview(preview)\r\n  })\r\n  //post data \r\n  const uploadData = new FormData()\r\n  uploadData.append('file', uploadImg)\r\n  uploadData.append('lang', lang)\r\n\r\n  //post api \r\n  const postBanner = async (e) => {\r\n    e.preventDefault()\r\n    const res = await Action.post(`/banner/web`, uploadData, {})\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Banner Uploaded Successfully!\" />)\r\n      setModal3(null)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n  }\r\n\r\n  //delete banner \r\n  const deleteBanner = async (id) => {\r\n    const res = await Action.delete(`/banner?id=${ id }`)\r\n    console.log(res)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Banner Deleted Successfully!\" />)\r\n      setModal(null)\r\n\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n  }\r\n\r\n  //Update api \r\n  const editFile = new FormData()\r\n  editFile.append('file', editImg)\r\n\r\n  const updateBanner = async (id) => {\r\n    const res = await Action.put(`/banner/${ id }`, editFile, {})\r\n    console.log(res)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Banner Updated Successfully!\" />)\r\n      setModal2(null)\r\n    } else {\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>All Desktop Banners </CardTitle>\r\n          <div className='d-flex'>\r\n            <Select\r\n              className='react-select w-25'\r\n              defaultValue={ lang }\r\n              options={ langs }\r\n              style={ { width: \"150px\" } }\r\n              onChange={ (e) => setLang(e.value) }\r\n            />\r\n            <div className=\"ml-auto mb-2\">\r\n              <Button color=\"primary\" onClick={ () => toggleAddNew(0) }>\r\n                Add new Banner\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Modal\r\n            isOpen={ modal3 === 0 }\r\n            toggle={ () => toggleAddNew(0) }\r\n            className='modal-dialog-centered'\r\n            modalClassName=\"modal-primary\"\r\n            key={ 0 }>\r\n            <ModalHeader toggle={ () => toggleAddNew(0) }>Upload</ModalHeader>\r\n            <ModalBody>\r\n              <Form>\r\n                <Row>\r\n                  <Col sm='12' className=\"mt-2\">\r\n                    {/* basic image upload */ }\r\n\r\n                    <h6> Upload Banners </h6>\r\n                    <DragDrop uppy={ uppy } />\r\n                    { uploadImg !== null ? <img className='rounded mt-2' src={ preview2 } alt='avatar' /> : null }\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n\r\n              <Button color=\"primary\" onClick={ (e) => postBanner(e) }>\r\n                Submit\r\n                {/* spinner */ }\r\n                {/* <Spinner color='light' /> */ }\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>S.No</th>\r\n                <th>Banners</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                banners.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index }>\r\n                      <td>\r\n                        { index + 1 }\r\n                      </td>\r\n\r\n                      <td> <img src={ baseURL + value.image } width=\"auto\" height=\"200\" alt=\"\" /> </td>\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalPrimary(value._id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } />  <span className='align-middle'>Edit</span>\r\n                            </DropdownItem>\r\n\r\n                            <DropdownItem href='/' onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              toggleModalDanger(value._id)\r\n                            } }>\r\n                              <Trash className='mr-50' size={ 15 } /> <span className='align-middle'>Delete</span>\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        {/* update banner modal */ }\r\n                        <Modal\r\n                          isOpen={ modal2 === value._id }\r\n                          toggle={ () => toggleModalPrimary(value.id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value._id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n                                <Col sm='12' className=\"mt-2\">\r\n                                  {/* basic image upload */ }\r\n\r\n                                  <h6> edit Banner </h6>\r\n                                  <DragDrop uppy={ uppyEdit } />\r\n                                  { editImg !== null ? <img className='rounded mt-2' src={ preview } alt='avatar' /> : null }\r\n                                </Col>\r\n\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n\r\n                            <Button color=\"primary\" onClick={ () => updateBanner(value._id) }>\r\n                              Submit\r\n                              {/* spinner */ }\r\n                              {/* <Spinner color='light' /> */ }\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal>\r\n\r\n                        {/* delete modal */ }\r\n                        <Modal\r\n                          isOpen={ modal === value._id }\r\n                          toggle={ () => toggleModalDanger(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-danger\"\r\n                          key={ value.id }>\r\n                          <ModalHeader toggle={ () => toggleModalDanger(value._id) }>Delete</ModalHeader>\r\n                          <ModalBody>\r\n                            Are you sure you want to delete this?\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <Button color=\"danger\" onClick={ () => deleteBanner(value._id) }>\r\n                              delete\r\n                            </Button>\r\n                          </ModalFooter>\r\n                        </Modal>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n\r\n\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default DesktopBanner\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `https://nanyapp2.herokuapp.com`\r\n    // baseURL: `https://nanybackendforadmin.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) "],"sourceRoot":""}